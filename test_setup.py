#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π YouTube downloader
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import fastapi
        import uvicorn
        import yt_dlp
        import celery
        import redis
        import sqlalchemy
        import pydantic
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
        from app.main import app
        from app.services.youtube_service import YouTubeService
        from app.models.download import Download
        print("‚úÖ –ú–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: OK")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_youtube_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º YouTube —Å–µ—Ä–≤–∏—Å"""
    print("üé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTube —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from app.services.youtube_service import YouTubeService
        
        service = YouTubeService()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ (–∫–æ—Ä–æ—Ç–∫–æ–µ)
        test_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # Rick Roll (–∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
        
        print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {test_url}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        info = service.get_video_info_sync(test_url)
        
        if info:
            print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title', 'N/A')}")
            print(f"   ‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info.get('duration', 'N/A')} —Å–µ–∫")
            print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {len(info.get('formats', []))}")
            return True
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ YouTube —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from app.config.settings import settings
        
        print(f"   ‚úÖ Database URL: {settings.DATABASE_URL[:50]}...")
        print(f"   ‚úÖ Redis URL: {settings.REDIS_URL}")
        print(f"   ‚úÖ Download Directory: {settings.DOWNLOAD_DIR}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(settings.DOWNLOAD_DIR):
            os.makedirs(settings.DOWNLOAD_DIR, exist_ok=True)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: {settings.DOWNLOAD_DIR}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ YouTube Downloader MVP\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("YouTube —Å–µ—Ä–≤–∏—Å", test_youtube_service),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        if test_func():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   ./start_dev.sh")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
